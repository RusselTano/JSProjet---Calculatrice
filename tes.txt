// Select DOM elements
const display = document.querySelector(".calc__calculation"); // Calculation display
const resultDisplay = document.querySelector(".calc__result"); // Result display
const buttons = [...document.querySelectorAll(".calc__button")]; // All buttons

// Button event listeners
const clearButton = document.querySelector("[data-action='ce']");
clearButton.addEventListener("click", clearDisplay);

function clearDisplay() {
  if (display.textContent === "0") return;
  display.textContent = display.textContent.length === 1 ? "0" : display.textContent.slice(0, -1);
}

const resetButton = document.querySelector("[data-action='c']");
resetButton.addEventListener("click", resetCalculator);

function resetCalculator() {
  display.textContent = "0";
  resultDisplay.textContent = "";
}

const digitButtons = buttons.filter((button) => /[0-9]/.test(button.getAttribute("data-action")));
digitButtons.forEach((button) => button.addEventListener("click", handleDigit));

function handleDigit(event) {
  const buttonValue = event.target.getAttribute("data-action");
  // Prevent leading zero unless current display is zero
  if (buttonValue === "0" && display.textContent === "0") return;
  display.textContent += buttonValue;
}

const operatorButtons = buttons.filter((button) => /[\/*+-]/.test(button.getAttribute("data-action")));
operatorButtons.forEach((button) => button.addEventListener("click", handleOperator));

function handleOperators(e) {
  const btnValue = e.target.getAttribute("data-action");
  if (/[\/*+-]/.test(calculation.textContent.slice(-1)))
    calculation.textContent = calculation.textContent.slice(0, -1) + btnValue;
  else calculation.textContent += btnValue;
}

function extractOperatorAndOperands(expression) {
  // Check for trailing operator (unfinished calculation)
  if (/[\/+*-.]/.test(expression.slice(-1))) {
    displayError("Please complete the calculation with a number.");
    return;
  }

  // Find the operator using a regular expression
  const operatorRegex = /[+\-*/]/;
  const operator = expression.match(operatorRegex);

  // Ensure an operator is found
  if (!operator) {
    displayError("Expression must contain an operator.");
    return;
  }

  // Separate the operands using the operator
  const operands = expression.split(operator);

  // Convert operands to numbers (handle potential errors)
  let operand1, operand2;
  try {
    operand1 = parseFloat(operands[0]);
    operand2 = parseFloat(operands[1]);
  } catch (error) {
    displayError("Invalid number format.");
    return;
  }

  return {
    operand1,
    operand2,
    operator: operator[0],
  };
}

const equalsButton = document.querySelector("[data-action='=']");
equalsButton.addEventListener("click", showResult);

function showResult() {
  const calculationData = extractOperatorAndOperands(display.textContent);
  if (!calculationData) return;

  const result = calculate(calculationData.operand1, calculationData.operand2, calculationData.operator);

  // Swap display content (result to display, calculation to result display)
  resultDisplay.textContent = display.textContent;
  display.textContent = result;
}

function calculate(operand1, operand2, operator) {
  let result;

  switch (operator) {
    case "+":
      result = operand1 + operand2;
      break;
    case "-":
      result = operand1 - operand2;
      break;
    case "*":
      result = operand1 * operand2;
      break;
    case "/":
      if (operand2 === 0) {
        displayError("Division by zero is not allowed.");
        return;
      }
      result = operand1 / operand2;
      break;
  }

  return result;
}

const decimalButton = document.querySelector("[data-action='.']");
decimalButton.addEventListener("click", handleDecimal);

function handleDecimal() {
  if (!display.textContent) return;

  let lastNumberSet = "";
  for (let i = display.textContent.length - 1; i >= 0; i--) {
    if (/[\/+*-]/.test(display.textContent[i])) {
      break;
    } else {
      lastNumberSet += display.textContent[i];
    }
  }

  if (!lastNumberSet.includes(".")) {
    display.textContent += ".";
  }
}

function displayError(message) {
  display.textContent = message;
  setTimeout(() => {
    display.textContent = "0";
  }, 2000);
}
